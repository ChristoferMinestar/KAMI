// 
// Decompiled by Procyon v0.5.36
// 

package me.zeroeightsix.kami.module.modules.exploits;

import org.lwjgl.opengl.GL11;
import me.zeroeightsix.kami.util.ReflectionHelper;
import me.zeroeightsix.kami.util.KamiTessellator;
import java.util.Iterator;
import net.minecraft.tileentity.TileEntityHopper;
import java.awt.Color;
import me.zeroeightsix.kami.event.events.RenderEvent;
import java.util.function.Predicate;
import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketCloseWindow;
import me.zeroeightsix.kami.setting.Settings;
import me.zero.alpine.listener.EventHandler;
import me.zeroeightsix.kami.event.events.PacketEvent;
import me.zero.alpine.listener.Listener;
import net.minecraft.util.math.BlockPos;
import me.zeroeightsix.kami.setting.Setting;
import me.zeroeightsix.kami.module.Module;

@Info(name = "IllegalItemBypass", category = Category.EXPLOITS, description = "Illegal Item Bypass")
public class IllegalItemBypass extends Module
{
    private Setting<Boolean> circleOwn;
    private Setting<Boolean> circleOthers;
    private Setting<Integer> circleMaxRange;
    private BlockPos ownHopper;
    @EventHandler
    public Listener<PacketEvent.Send> listener;
    
    public IllegalItemBypass() {
        this.circleOwn = this.register(Settings.b("Draw Circle for own 32k Hopper", true));
        this.circleOthers = this.register(Settings.b("Draw Circle for other Hoppers", true));
        this.circleMaxRange = this.register(Settings.i("Circle max Range", 64));
        this.ownHopper = null;
        BlockPos clickTarget;
        this.listener = new Listener<PacketEvent.Send>(event -> {
            if (!this.isDisabled()) {
                if (event.getPacket() instanceof CPacketCloseWindow) {
                    event.cancel();
                }
                if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && IllegalItemBypass.mc.field_71439_g.func_184614_ca().func_77973_b() == Item.func_150898_a((Block)Blocks.field_150438_bZ)) {
                    clickTarget = ((CPacketPlayerTryUseItemOnBlock)event.getPacket()).func_187023_a();
                    if (IllegalItemBypass.mc.field_71441_e.func_180495_p(clickTarget).func_177230_c() != Blocks.field_150438_bZ) {
                        this.ownHopper = clickTarget.func_177982_a(0, 1, 0);
                    }
                }
            }
        }, (Predicate<PacketEvent.Send>[])new Predicate[0]);
    }
    
    @Override
    public void onWorldRender(final RenderEvent event) {
        if (this.circleOwn.getValue() && this.ownHopper != null && IllegalItemBypass.mc.field_71439_g.func_70011_f((double)this.ownHopper.field_177962_a, (double)this.ownHopper.field_177960_b, (double)this.ownHopper.field_177961_c) <= this.circleMaxRange.getValue()) {
            this.drawRange(this.ownHopper, Color.GREEN.getRed() / 255.0f, Color.GREEN.getGreen() / 255.0f, Color.BLUE.getBlue() / 255.0f);
        }
        if (this.circleOthers.getValue()) {
            for (final Object tileEntity : IllegalItemBypass.mc.field_71441_e.field_147482_g) {
                if (tileEntity instanceof TileEntityHopper) {
                    final BlockPos targetHopper = ((TileEntityHopper)tileEntity).func_174877_v();
                    if (IllegalItemBypass.mc.field_71439_g.func_70011_f((double)targetHopper.field_177962_a, (double)targetHopper.field_177960_b, (double)targetHopper.field_177961_c) > this.circleMaxRange.getValue()) {
                        continue;
                    }
                    if (this.ownHopper != null && ((TileEntityHopper)tileEntity).func_174877_v().equals((Object)this.ownHopper)) {
                        continue;
                    }
                    this.drawRange(targetHopper, Color.RED.getRed() / 255.0f, Color.ORANGE.getGreen() / 255.0f, Color.ORANGE.getBlue() / 255.0f);
                }
            }
        }
    }
    
    private void drawRange(final BlockPos blockPos, final float red, final float green, final float blue) {
        KamiTessellator.prepare(7);
        final double x = blockPos.func_177958_n() + 0.5 - ReflectionHelper.getRenderPosX();
        final double y = blockPos.func_177956_o() - ReflectionHelper.getRenderPosY();
        final double z = blockPos.func_177952_p() + 0.5 - ReflectionHelper.getRenderPosZ();
        GL11.glPushMatrix();
        GL11.glBlendFunc(770, 771);
        GL11.glEnable(3042);
        GL11.glLineWidth(2.0f);
        GL11.glDisable(3553);
        GL11.glDisable(2929);
        GL11.glDepthMask(false);
        GL11.glColor4d((double)red, (double)green, (double)blue, 0.2);
        GL11.glBegin(9);
        for (int i = 0; i <= 360; ++i) {
            GL11.glVertex3d(x + Math.sin(i * 3.1415 / 180.0) * 7.0, y, z + Math.cos(i * 3.1415 / 180.0) * 7.0);
        }
        GL11.glEnd();
        GL11.glLineWidth(2.0f);
        GL11.glEnable(3553);
        GL11.glEnable(2929);
        GL11.glDepthMask(true);
        GL11.glDisable(3042);
        GL11.glPopMatrix();
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        KamiTessellator.release();
    }
}
